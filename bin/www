#!/usr/bin/env node

var app = require("../app");
var http = require("http");
var debug = require("debug")("express-sequelize");
var models = require("../models"); 

// whatever is in the environment variable PORT, or 5000 if theres nothing there. Store in Express
var port = normalizePort(process.env.PORT || "5000");
app.set("port", port);

// create HTTP server
var server = http.createServer(app);
// when the server starts, update database automatically
models.sequelize.sync().then(function () { 
    server.listen(port);
});
server.on("error", onError);
server.on("listening", onListening);

// normalize a port into a number, string, or false
function normalizePort(val) { 
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}

// event listener for HTTP servers error event
function onError(error) {
    if (error.syscall !== "listen") {
        throw error;
    }
    var bind = typeof port === "string"
        ? "Pipe " + port
        : "Port " + port;

    switch (error.code) {
        case "EACCES":
            console.error(bind + " requires elevated privileges");
            process.exit(1);
            break;
        case "EADDRINUSE":
            console.error(bind + " is already in use");
            process.exit(1);
            break;
        default:
            throw error;
    }
}

// event listener for HTTP listening event
function onListening() {
    var addr = server.address();
    var bind = typeof addr === "string"
        ? "Pipe " + addr
        : "Port " + addr.port;
    debug("Listening on " + bind);
}
